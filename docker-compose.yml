version: '3.2'
services:
  # Authentication
  auth:
    build: 
      context: './auth/'
      dockerfile: Dockerfile.web
    ports:
      - "8080:8080"
    environment: 
      DB_HOST: "auth-db"
      DB_NAME: "${DB_NAME}"
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      AUTH_ISSUER: "${AUTH_ISSUER}"
      AUTH_PUBLIC: "${AUTH_PUBLIC}"
      AUTH_PRIVATE: "${AUTH_PRIVATE}"
    volumes:
      - ./auth/src/:/var/www/html/:rw
    networks:
      - backend
    container_name: auth
  
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest  
    depends_on:
      - auth-db
    networks:
      - frontend
      - backend
    ports:
      - "8081:80"
    container_name: phpmyadmin
    environment:
      PMA_HOST: auth-db
      PMA_USER: root
      PMA_PASSWORD: "${DB_ROOT_PASSWORD}"
  # Authentication database
  auth-db:
    build:
      context: './auth-db/'
      dockerfile: Dockerfile.web
      args:
        MYSQL_VERSION: ${MYSQL_VERSION}
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - ./auth-db/db_init:/docker-entrypoint-initdb.d
      #- data:/var/lib/mysql
    networks:
      - backend
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${DB_NAME}"
      MYSQL_USER: "${DB_USERNAME}"
      MYSQL_PASSWORD: "${DB_PASSWORD}"
      MYSQL_INITDB_SKIP_TZINFO: "yes"
    container_name: auth-db
  
  # API
  api:
    container_name: api
    restart: always
    build: ./node-api/api
    environment: 
      JWT_PUBLIC_KEY: "${AUTH_PUBLIC}"
    volumes:
        - ./node-api/api/src:/usr/src/app
    ports:
      - "3001:3000"
    depends_on:
      - mongodb-primary
      - zookeeper
    networks:
      - backend

  # Mongodb replica set for api
  mongodb-primary:
    image: 'bitnami/mongodb:latest'
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    ports:
      - "27017:27017"
    networks:
      - backend
    container_name: mongodb-primary
    #volumes:
    #  - 'mongodb_master_data:/bitnami'

  mongodb-secondary:
    image: 'bitnami/mongodb:latest'
    networks:
      - backend
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    container_name: mongodb-secondary

  mongodb-arbiter:
    image: 'bitnami/mongodb:latest'
    networks:
      - backend
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    container_name: mongodb-arbiter

  # Others
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    networks:
      - backend
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - ./zookeeper/config/zoo.cfg:/opt/bitnami/zookeeper/conf/zoo.cfg
      - ./zookeeper/scripts:/opt/zoo/scripts
    container_name: zookeeper
    #command: /opt/zoo/scripts/init_script.sh
  

networks:
  frontend:
  backend:
#volumes:
#  data:
version: '3.2'
services:
  # Authentication
  auth:
    image: '${CONTAINER_REGISTRY}/auth'
    build: 
      context: './auth/auth-php/'
      dockerfile: Dockerfile.prod
    ports:
      - "80"
    secrets:
      - mysql_password
    environment: 
      DB_HOST: "auth-db"
      DB_NAME: "${MYSQL_NAME}"
      DB_USERNAME: "${MYSQL_USERNAME}"
      DB_PASSWORD_FILE: /run/secrets/mysql_password
      AUTH_ISSUER: "${AUTH_ISSUER}"
      AUTH_PUBLIC: "${AUTH_PUBLIC}"
      AUTH_PRIVATE: "${AUTH_PRIVATE}"
    links:
      - auth-db
    networks:
      - backend
    container_name: auth
  
  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin:latest  
  #   secrets:
  #     - mysql_root_password
  #   links:
  #     - auth-db
  #   networks:
  #     - frontend
  #     - backend
  #   ports:
  #     - "8081:80"
  #   container_name: phpmyadmin
  #   environment:
  #     PMA_HOST: auth-db
  #     PMA_USER: root
  #     PMA_PASSWORD_FILE: /run/secrets/mysql_root_password

  #Authentication database
  auth-db:
    image: '${CONTAINER_REGISTRY}/authdb'
    build:
      context: './auth/auth-db/'
      dockerfile: Dockerfile.prod
      args:
        MYSQL_VERSION: ${MYSQL_VERSION}
    secrets:
      - mysql_root_password
      - mysql_password
    restart: always
    ports:
      - "3306:3306"
    volumes:
      #- ./auth/auth-db/db_init:/docker-entrypoint-initdb.d
      - auth-data:/var/lib/mysql
    networks:
      - backend
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_DATABASE: "${MYSQL_NAME}"
      MYSQL_USER: "${MYSQL_USERNAME}"
      MYSQL_INITDB_SKIP_TZINFO: "yes"
    container_name: auth-db

  # API
  api:
    container_name: api
    restart: always
    image: '${CONTAINER_REGISTRY}/api'
    build:
      context: './api/node/'
      dockerfile: Dockerfile.prod
    working_dir: /home/node/app/
    environment: 
      JWT_PUBLIC_KEY: "${AUTH_PUBLIC}"
      MONGODB_USER: '${MONGODB_API_USER}'
      MONGODB_DATABASE: '${MONGODB_API_DB}'
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME}'
      MONGODB_REPLICA_SET_MEMBERS: comp414_mongodb-primary,comp414_mongodb-secondary
      PLAYMASTER_IP_PREFIX: '172.21.0.'
    volumes:
        - ./api/node:/home/node/app
    ports:
      - "3000"
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - zookeeper
    networks:
      - backend
    secrets:
      - mongodb_api_password

  # Others
  zookeeper:
    image: '${CONTAINER_REGISTRY}/zookeeper'
    build:
      context: './zookeeper'
      dockerfile: Dockerfile.prod
    networks:
      - backend
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    container_name: zookeeper

  # Playmaster
  game:
    image: '${CONTAINER_REGISTRY}/playmaster'
    build:
      context: './game/'
      dockerfile: Dockerfile.prod
    environment:
      JWT_PUBLIC_KEY: "${AUTH_PUBLIC}"
      MONGODB_USER: '${MONGODB_PLAYMASTER_USER}'
      MONGODB_DATABASE: '${MONGODB_PLAYMASTER_DB}'
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME}'
      MONGODB_REPLICA_SET_MEMBERS: comp414_mongodb-primary,comp414_mongodb-secondary
      PLAY_SUBNET_PREFIX: '192.170.0.' 
      NODE_ENV: 'development'
      PORT: '${GAME_PORT}'
    deploy:
      replicas: 2
    networks:
      - backend
      - play_network
    links:
      - zookeeper
    secrets:
      - mongodb_playmaster_password
    container_name: game
  

  web:
    image: '${CONTAINER_REGISTRY}/nginx'
    build:
      context: './web/'
      dockerfile: Dockerfile.swarm
    ports:
      - "80:80"
    links:
      - "game"
      - "auth"
      - "api"
    networks:
      - backend
      - play_network
    container_name: web


  # Mongodb replica set for api
  mongodb-primary:
    image: '${CONTAINER_REGISTRY}/mongodb-primary'
    build:
      context: './api/mongo/'
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      MONGODB_ADVERTISED_HOSTNAME: mongodb-primary
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_ROOT_PASSWORD: '${MONGODB_ROOT_PASSWORD}'
      MONGODB_REPLICA_SET_KEY: '${MONGODB_REPLICA_SET_KEY}'
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME}'
      MONGODB_API_USER: '${MONGODB_API_USER}'
      MONGODB_API_DB: '${MONGODB_API_DB}'
      MONGODB_PLAYMASTER_USER: '${MONGODB_PLAYMASTER_USER}'
      MONGODB_PLAYMASTER_DB: '${MONGODB_PLAYMASTER_DB}'
    ports:
      - "27017"
    networks:
      - backend
    secrets:
      - mongodb_config
    container_name: mongodb-primary
    #volumes:
      #- 'master-data:/bitnami'

  mongodb-secondary:
    image: 'bitnami/mongodb:4.2'
    networks:
      - backend
    depends_on:
      - mongodb-primary
    environment:
      #MONGODB_ADVERTISED_HOSTNAME: mongodb-secondary
      MONGODB_REPLICA_SET_MODE: secondary
      MONGODB_PRIMARY_HOST: mongodb-primary
      MONGODB_PRIMARY_PORT_NUMBER: '${MONGODB_PRIMARY_PORT_NUMBER}'
      MONGODB_PRIMARY_ROOT_PASSWORD: '${MONGODB_ROOT_PASSWORD}'
      MONGODB_REPLICA_SET_KEY: '${MONGODB_REPLICA_SET_KEY}'
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME}'
    container_name: mongodb-secondary

  mongodb-arbiter:
    image: 'bitnami/mongodb:4.2'
    networks:
      - backend
    depends_on:
      - mongodb-primary
    environment:
      #MONGODB_ADVERTISED_HOSTNAME: mongodb-arbiter
      MONGODB_REPLICA_SET_MODE: arbiter
      MONGODB_PRIMARY_HOST: mongodb-primary
      MONGODB_PRIMARY_PORT_NUMBER: '${MONGODB_PRIMARY_PORT_NUMBER}'
      MONGODB_PRIMARY_ROOT_PASSWORD: '${MONGODB_ROOT_PASSWORD}'
      MONGODB_REPLICA_SET_KEY: '${MONGODB_REPLICA_SET_KEY}'
      MONGODB_REPLICA_SET_NAME: '${MONGODB_REPLICA_SET_NAME}'
    container_name: mongodb-arbiter

secrets:
  mysql_password:
    file: ./secrets/mysql_password
  mysql_root_password:
    file: ./secrets/mysql_root_password
  mongodb_api_password:
    file: ./secrets/mongodb_api_password
  mongodb_config:
    file: ./secrets/mongodb_config
  mongodb_playmaster_password:
    file: ./secrets/mongodb_playmaster_password

networks:
  backend:
    ipam:
      driver: default
  play_network:
    ipam:
     driver: default
     config:
       - subnet: 192.170.0.0/16

volumes:
  auth-data:
  master-data: